
// run "gomacro -m -w make_fibonacci.gomacro"
// to preprocess this file and generate make_fibonacci.go

package main

:import (
	"go/ast"
	"reflect"
)

:macro makefib(name, typ ast.Node) ast.Node {
	// go/ast.FuncDecl can only represent function declarations
	// where the function name is an *ast.Ident, not a generic ast.Node
	//
	// Work around this limitation by using the name FOO and replacing it below
	ret := ~"{
		~func FOO(n ~,typ) ~,typ {
			if n <= 2 {
				return 1
			}
			return ~,name(n-1) + ~,name(n-2)
		}
	}
	ret.Name = name.(*ast.Ident)
	return ret
}

makefib; fibonacci_int;    int
makefib; fibonacci_int32;  int32
makefib; fibonacci_int64;  int64

makefib; fibonacci_uint;   uint
makefib; fibonacci_uint32; uint32
makefib; fibonacci_uint64; uint64
